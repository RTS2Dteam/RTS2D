""" ability is a action of a unit, often triggered by user(or ai) by one or more    input interfaces, and it is somehow a unit accept an order"""from . import posclass Ability(object):    def __init__(self):        super(Ability, self).__init__()            def initial(self, unit):        """ initial the ability on the unit """        return            def usable(self, unit, **kw):        """ if the ability is usable at unit in kw situation """        raise NotImplementedError            def inspect(self, unit, **kw):        """ inspect the use effect(is this ability suitable to use?),        could be used by AI """        raise NotImplementedError            def use(self, unit, **kw):        """ actually use the ability """        assert self.usable(unit, **kw), "not usable!"            def update(self, unit):        """ called every frame """        raise NotImplementedError        class MoveAbility(Ability):    def __init__(self):        super(MoveAbility, self).__init__()            def initial(self, unit):        """ initial the ability on the unit """        unit._waypoints = []        unit._command = "default"            def usable(self, unit, target_pos, keep_waypoint=False, **kw):        return unit.world.range.collidepoint(target_pos)            def inspect(self, unit, target_pos, keep_waypoint=False, **kw):        """ inspect a move, return distance """        raise NotImplementedError            def use(self, unit, target_pos, keep_waypoints=False, **kw):        """ make move """        super(MoveAbility, self).use(unit, target_pos=target_pos, keep_waypoints=keep_waypoints, **kw)        if keep_waypoints:            unit._waypoints.append(target_pos)        else:            unit._waypoints = [target_pos]        unit._command = "move"        unit.status = "move"        # XXX: change direction                    def update(self, unit):        """ move the unit through the waypoints """        # now it's just moving without hesitate        if unit._command is "default":            if unit._waypoints: # hands over all waypoints to "move"                unit._command = "move"                unit.status = "move"        if unit._command is not "move":            return        if not unit._waypoints:            unit._command = "default"            unit.status = "normal"            return                    self.makemove(unit)            def makemove(self, unit):        """ actually move the unit """        waypoints = unit._waypoints        assert waypoints, "no waypoints!"        # get move direction        # XXX: now assume only pos in the waypoints, but there should be units        deltatime = unit.world.deltatime        # move the unit straight to next waypoint        movspd = unit.movspd # pixel per sec        distance = deltatime * float(movspd) / 1000.        cur_pos = unit.pos        while distance > 0.:            if not waypoints:                break            cur_dist = waypoints[0]            d = pos.distance(cur_pos, cur_dist)            if d > distance: # can't reach waypoint                direction = pos.direction(cur_pos, cur_dist)                cur_pos = cur_pos + direction * distance                distance = 0.                break            new_distance = distance - d            cur_pos = waypoints.pop(0)            distance = new_distance                    unit.pos = cur_pos            class AttackAbility(Ability):    passclass BuildAbility(Ability):    pass    class RallyPointAbility(Ability):    """ set spawn point of a building """    class ProducingAbility(Ability):    """ producing, researching, etc """    